package ese.preferences;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.preference.PreferenceFragment;
import android.preference.PreferenceManager;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

// Settings are stored by default in the SharedPreferencesFile of an app.
// Preferences are build out of a set of predefined objects using XML
// https://developer.android.com/guide/topics/ui/settings.html

public class MainActivity extends AppCompatActivity {// AppCompatActivity in order to have consistent UX for the app bar -> https://developer.android.com/training/appbar/setting-up.html

    private static String TAG = "ese.preferences";

    // == 04
    private SharedPreferences.OnSharedPreferenceChangeListener prefChangeListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        // == 01 define preferences in a preferences screen int res/xml/preferences.xml
        // manually create preferences.xml file see <!-- 01 to continue
        super.onCreate(savedInstanceState);

        // == 02 show the preferences screen
        // since Android 3.0 fragments is the preferred way. We will talk about fragments later

//        getFragmentManager().beginTransaction()
//                .replace(android.R.id.content, new SettingsFragment())
//                .commit();

        // == 03 read preferences
//        SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);
//        boolean sendUsageInfo = sharedPref.getBoolean("pref_send_usage_info", false);
//        Log.i(TAG, "onCreate: " + sendUsageInfo);

        // == 04 listen to changes
        // SharedPreferences only holds soft refs for change listeners. We have to prevent the GC from collecting the listener
        // Alternative: Make MainActivity implement OnSharedPreferenceChangeListener

//        prefChangeListener = new SharedPreferences.OnSharedPreferenceChangeListener() {
//            @Override
//            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
//                Log.i(TAG, "onSharedPreferenceChanged: key: " + key + ", new value: " + sharedPreferences.getBoolean(key, false));
//            }
//        };
//
//        sharedPref.registerOnSharedPreferenceChangeListener(prefChangeListener);
//
        // == 05 Activity generated by New -> Activity -> Settings
        // Fragments to be used are defined in pref_headers.xml
        // In fact the file name does not matter! Only <preference-headers> in any file is enough
//        Intent showSettingsIntent = new Intent();
//        showSettingsIntent.setClass(this, SettingsActivity.class);
//        startActivity(showSettingsIntent);

        // == 06 Call preferences from an Option Menu
        // see onCreateOptionsMenu and onOptionsItemsSelected

        // == 07 Use preferences as a generic key / value store
//        SharedPreferences settings = getSharedPreferences("my_preferences", MODE_PRIVATE); // do not use other modes because they fail on Android > 7 for security reasons
//        int launchCounter = settings.getInt("launchCounter", 0);
//        launchCounter ++;
//        Log.i(TAG, "onCreate: " + launchCounter);
//        SharedPreferences.Editor editor = settings.edit();
//        editor.putInt("launchCounter", launchCounter);
//        editor.apply();

        // == 08
        // Example: Create preferences for a user profile (Name, email, send email notification (true false), notification title, ....)
        // In the main activity. When the button notify is pressed send an email to the user.
    }

    // == 06
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);

        // add folder res/menu/
        // create file options_menu.xml
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.options_menu, menu);
        return true;

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item)
    {
        switch(item.getItemId())
        {
            case R.id.preferences:
            {
                Intent intent = new Intent();
                intent.setClass(this, SettingsActivity.class);
                startActivity(intent);
                return true;
            }
        }

        return super.onOptionsItemSelected(item);
    }

    public static class SettingsFragment extends PreferenceFragment {
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            // Load the preferences from an XML resource
            addPreferencesFromResource(R.xml.preferences);
        }
    }


}
